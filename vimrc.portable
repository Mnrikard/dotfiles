set nocompatible
scriptencoding utf-8
set encoding=utf-8
"VundleSection{{{
	filetype off
	" set the runtime path to include Vundle and initialize
	if has("win32")
		set rtp+=c:\users\mrikard\vimfiles\bundle\Vundle.vim
	else
		set rtp+=~/.vim/bundle/Vundle.vim
	endif
	call vundle#begin()

	" let Vundle manage Vundle, required
	Plugin 'VundleVim/Vundle.vim'

	"plugin on GitHub repo
	Plugin 'tpope/vim-fugitive'
	Plugin 'leafgarland/typescript-vim'
	Plugin 'vim-airline/vim-airline'
	Plugin 'PProvost/vim-ps1'
	Plugin 'tpope/vim-surround'
	Plugin 'scrooloose/syntastic'
	Plugin 'ervandew/supertab'
	Plugin 'tpope/vim-vividchalk'
	Plugin 'kien/ctrlp.vim'
	Plugin 'easymotion/vim-easymotion'
	Plugin 'scrooloose/nerdtree'

	call vundle#end()            " required
	filetype plugin indent on    " required
"}}}

"PluginSettings{{{
	
	let g:xml_syntax_folding=1
	au FileType xml,xsl,xslt,html,razor setlocal foldmethod=syntax
	set statusline+=%{fugitive#statusline()}
	"syntastic {{{
		set statusline+=%#warningmsg#
		set statusline+=%{SyntasticStatuslineFlag()}
		set statusline+=%*

		let g:syntastic_always_populate_loc_list = 1
		let g:syntastic_auto_loc_list = 2
		let g:syntastic_check_on_open = 1
		let g:syntastic_check_on_wq = 0
"		let g:syntastic_cs_checkers = ["code_checker","issues","semantic","syntax"]
	"}}}
"}}}

"Sets{{{
	set whichwrap+=<,>,[,]
	set hidden
	set confirm
	set wildmenu
	set wildignore+=~*,*.png,*.jpg,*.exe,*.dll,*.swp
	set showcmd
	set hlsearch
	set ignorecase
	set smartcase
	set backspace=indent,eol,start
	set autoindent
	set nostartofline
	set ruler
	set laststatus=1
	set confirm
	set mouse=a
	set cmdheight=2
	set number
	set notimeout ttimeout ttimeoutlen=200
	set shiftwidth=4
	set tabstop=4
	set softtabstop=4
	set foldlevelstart=99
	set foldmethod=indent
	set nowrap
	set list
	set listchars=tab:»\ ,trail:·
	let mapleader=" "
	set encoding=utf8
	set laststatus=2
	colorscheme vividchalk
"}}}

"Maps{{{
	nnoremap <C-L> :nohl<CR><C-L>
	nnoremap <C-J> a<CR><Esc>k$
	nnoremap <leader>nl o<Esc>
	vnoremap <C-c> "+y
	nnoremap <C-tab> :bn<Enter>
	nnoremap <C-S-tab> :bprev<Enter>
	nnoremap <C-s> :w<Enter>
	inoremap <C-s> <Esc>:w<Enter>i
	nnoremap <Leader>o i<Enter><Esc>
	nnoremap <C-s> :w<Enter>
	nnoremap <Leader>p "0p
	nnoremap <leader>ev :vsplit $MYVIMRC<cr>
	nnoremap <leader>sv :source $MYVIMRC<cr>
	inoremap jjk <Esc>
	nnoremap <leader>kd :execute "normal! mhgg=G<C-v><cr>`h"<cr>
	inoremap wwh <Esc>:wincmd W<cr>
	nnoremap wwh :wincmd W<cr>
	nnoremap <leader>h :let @/='\<<C-R>=expand("<cword>")<CR>\>'<CR>:set hls<CR>
	nnoremap <leader>rr :set operatorfunc=Refactor<cr>g@
	nnoremap <leader>ll viwgu
	nnoremap <leader>uu viwgU
"}}}

"AutoCmd{{{
augroup myAutoCmds
	autocmd!
	autocmd FileType xml,xsl,xslt setlocal foldmethod=syntax
	autocmd BufEnter * syntax sync minlines=1000
	autocmd FileType vim setlocal foldmethod=marker
	autocmd FileType vim setlocal foldlevel=0
	autocmd FileType markdown setlocal nonumber
	autocmd FileType markdown setlocal wrap
	autocmd FileType markdown setlocal colorcolumn=80
augroup end
"}}}

syntax on
syntax sync minlines=1000

"Commands {{{
	function! Refactor(type)
		let toname=input('New Name:')

		let savedReg = @@
		echo a:type
		if a:type  ==# 'v'
			normal! y
		elseif a:type ==# 'char' || a:type ==# 'line'
			normal! viwy
		else
			return
		endif

		execute 'normal! m0'
		echom ':%s/\v<'.@@.'>/'.toname."/g" . expand("<cr>")<cr>
		execute "normal! `0"
		let @@ = savedReg
	endfunction

	command! Nom execute "%s///g"
	command! BM execute "bufdo | bd!"
	command! BD execute "bp | sp | bn | bd"

	function! MoveLine(lnum)
		let currline=line('.')
		echo currline "moving to" a:lnum
		execute "m" a:lnum
		execute currline
	endfunction

	function! MoveLineUp()
		let currline=line('.')
		execute "m" currline-2
	endfunction

	function! MoveLineDown()
		let currline=line('.')
		execute "m" currline+1
	endfunction

	command! Paste execute 'normal! "+p'."<C-v><cr>"

	command! -nargs=1 M execute "call MoveLine(<args>)"
	command! -nargs=0 Md execute "call MoveLineDown()"
	command! -nargs=0 Mu execute "call MoveLineUp()"
"}}}
